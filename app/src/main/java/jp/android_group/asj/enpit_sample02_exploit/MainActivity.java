package jp.android_group.asj.enpit_sample02_exploit;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Environment;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class MainActivity extends AppCompatActivity {
    private static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        startPermissionCheck();
    }
    /**
     * パミッション取得済の状態でこのメソッドを呼ぶ
     * ファイルのアクセスは本来非同期で行う
     * SD持ってない端末とかファイル関係のエラー処理は色々する必要がある。
     */
    private void doSomething() {

        String email="";
        String password="";
        String message;

        //enPit_Sample02_Exploitホルダではなく、enPit_Sanple02フォルダを選択する
        File strage_root = Environment.getExternalStorageDirectory(); //strage/emulated0
        File file = new File(strage_root,"Android/data/jp.android_group.asj.enpit_sample02/files/password.txt");


        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            email = br.readLine();
            password = br.readLine();
            br.close();

        } catch (FileNotFoundException e) {
            Toast.makeText(this,"ファイルが見つかりませんでした",Toast.LENGTH_LONG).show();

        } catch (IOException e) {
            Toast.makeText(this,"ファイル読み込みに失敗しました",Toast.LENGTH_LONG).show();
        }

        TextView messageTextView = findViewById(R.id.messageTextView);
        TextView emailTextView = findViewById(R.id.emailTextView);
        TextView passwordTextView = findViewById(R.id.passwordTextView);

        message = file.getAbsolutePath();
        messageTextView.setText("次のファイルから読み込みました\n"+message);
        emailTextView.setText(email);
        passwordTextView.setText(password);
    }


    void startPermissionCheck(){
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            // Permission is not granted
            // Should we show an explanation?
            if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
                Toast.makeText(this,"パミッションがOFFになっているため実行できません",Toast.LENGTH_LONG).show();
            } else {
                // No explanation needed; request the permission
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                        MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE);

                // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
                // app-defined int constant. The callback method gets the
                // result of the request.
            }
        } else {
            // Permission has already been granted
            doSomething();
        }


    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    doSomething();
                } else {
                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }

            }

            // other 'case' lines to check for other
            // permissions this app might request.
        }
    }
}
